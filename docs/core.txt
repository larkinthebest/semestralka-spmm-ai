AI Multimedia Tutor
Project Description
A Python-based offline AI tutor for multimedia content processing, developed for a Multimedia Processing course. Users upload files (PDF, text, images, audio, video), and the system processes them locally to create a knowledge base. The AI answers questions, generates quizzes, and tracks user progress via a simple chat + source panel interface.
Key Features

Upload and process PDF, text, images, audio, and video files locally.
Chat modes: "Explanation" (answers with citations, image display) and "Testing" (multiple-choice/open-ended quizzes).
User profile tracking: Topics covered, errors, study recommendations.
Fully offline (no cloud; potential LLM exceptions noted).
Built with open-source Python libraries.

Installation

Clone the repo: git clone https://github.com/your-repo/ai-multimedia-tutor.git
Install Python 3.9+ and dependencies: pip install -r requirements.txt
Run the app: python main.py (Tkinter) or flask run --no-reload (Flask, local server).
Ensure offline libraries are installed (e.g., PocketSphinx models).

Requirements:

Python 3.9+
Libraries: PyPDF2, tesserocr, SpeechRecognition, moviepy, scikit-learn, sentence-transformers, sqlite3 (see requirements.txt).
No internet required post-setup.

Usage

Launch the app.
Upload files via the GUI (file dialog or drag-drop).
Use "Explanation" mode to ask questions (e.g., "Summarize the PDF").
Switch to "Testing" mode for quizzes.
View profile for progress and recommendations.

Sample Files: Test with data in /samples/ (add your own).
Development

Architecture: Python backend (file processing, AI, DB) + Tkinter/Flask frontend.
Contributing: Create feature branches (e.g., feature/file-parsing). Use pull requests.
Known Issues: Audio transcription may be slow; limit file sizes to 10MB.

Group Members

Member 1: GUI/Frontend
Member 2: File Processing
Member 3: AI Logic
Member 4: User Profile & Integration

License
MIT License - Free to use/modify with attribution.



UI preference:
Make the "explanation" mode in the nice orange or green colours, and the "testing" in the purple colour palete (not vibrant)
Use these consistently in the UI (buttons, highlights, etc.).

there should be 3 panels:
on the left, there is a system that talks back to you. could be set different names, the icon (image for each name, which i'll upload) will be different based on the name of the mdoel.
below is the user, if the user is not set, then simply as a guest

after there are chats with the + button (to add another chat). each chat should be possible to rename, remove.
after almost at the bottom left, there is an asset section with a + button to add the file (there we can upload video, audio, photo, files. as well as rename them, remove them)


in the middle there is a chat section
below the chat, there is an insert/typing section in form of the oval (no extra buttons), within the typing section, on the right there is a pin, to upload the asset with the message (it cannot be send without a message, you add the asset this way to the message).
on the right side of the typing are there is a bubble with the send icon, which can be triggered either by clicking, or by pressing enter.


on the right panel, there is a source pannel.